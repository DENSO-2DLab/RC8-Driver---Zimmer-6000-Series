'!TITLE "Denso robot program"
#Include "Variant.h"

Dim IRStrAddr(4) As Integer
Dim HRStrAddr(4) As Integer

Sub Main

	' Zimmer Variables
	Dim ctrl_word As Integer
	Dim device_mode As Integer
	Dim workpiece_no As Integer
	Dim position_tolerance As Integer
	Dim gripping_force As Integer
	Dim drive_velocity As Integer
	Dim base_position As Integer
	Dim shift_position As Integer
	Dim teach_position As Integer
	Dim work_position As Integer
	Dim status_word As Integer
	Dim diagnostics As Integer
	Dim actual_position As Single

	IRStrAddr(0) = &h003	' Port1 Inputs
	IRStrAddr(1) = &h013	' Port2 Inputs
	IRStrAddr(2) = &h023	' Port3 Inputs
	IRStrAddr(3) = &h033	' Port4 Inputs

	HRStrAddr(0) = &h802	' Port1 Outputs
	HRStrAddr(1) = &h812	' Port2 Outputs
	HRStrAddr(2) = &h822	' Port3 Outputs
	HRStrAddr(3) = &h832	' Port4 Outputs

	Dim fResult As Variant 
	fResult = ZConnect("10.0.0.2", 1, IRStrAddr(0), HRStrAddr(0))

	' --- INPUTS REGISTERS ---
	status_word = ZGet_Status(fResult)

	Dim fStatus(15) As Integer
	fStatus(0) = ZGet_HomePoseOK_Status(fResult)
	fStatus(1) = ZGet_MotorOn_Status(fResult)
	fStatus(2) = ZGet_InMotion_Status(fResult)
	fStatus(3) = ZGet_CompleteMovement_Status(fResult) 
	fStatus(4) = ZGet_NJogModeActive_Status(fResult)
	fStatus(5) = ZGet_PJogModeActive_Status(fResult)
	fStatus(6) = ZGet_GripCtrlSysActive_Status(fResult)
	fStatus(7) = ZGet_CtrlError_Status(fResult)
	fStatus(8) = ZGet_BasePose_Status(fResult)
	fStatus(9) = ZGet_TeachPose_Status(fResult)
	fStatus(10) = ZGet_WorkPose_Status(fResult)
	fStatus(11) = ZGet_UndefPose_Status(fResult)
	fStatus(12) = ZGet_DataTransferOK_Status(fResult)
	fStatus(13) = ZGet_CtrlWordx100_Status(fResult)
	fStatus(14) = ZGet_CtrlWordx200_Status(fResult)
	fStatus(15) = ZGet_Error_Status(fResult)
	
	diagnostics = ZGet_Diagnostics(fResult)
	actual_position = ZGet_CurPos(fResult)

	' --- HOLDING REGISTERS (READ) --- 
	ctrl_word = ZGet_CtrlWord(fResult)
	device_mode = ZGet_DeviceMode(fResult)
	workpiece_no = ZGet_WorkpieceNo(fResult)
	position_tolerance = ZGet_PoseTolerance(fResult)
	gripping_force = ZGet_GripForce(fResult)
	drive_velocity = ZGet_DriveVelocity(fResult)
	base_position = ZGet_BasePose(fResult)
	shift_position = ZGet_ShiftPose(fResult)
	teach_position = ZGet_TeachPose(fResult)
	work_position = ZGet_WorkPose(fResult)

	' --- HOLDING REGISTERS (WRITE) --- 
	Call ZSet_CtrlWord(fResult, 1)
	Call ZSet_DeviceMode(fResult, 1)
	Call ZSet_WorkpieceNo(fResult, 1)
	Call ZSet_PoseTolerance(fResult, 1)
	Call ZSet_GripForce(fResult, 1)
	Call ZSet_DriveVelocity(fResult, 1)
	Call ZSet_BasePose(fResult, 1)
	Call ZSet_ShiftPose(fResult, 1)
	Call ZSet_TeachPose(fResult, 1)
	Call ZSet_WorkPose(fResult, 1)

'	Call ZSet_CtrlWord(fResult, 256)
'	Call ZSet_CtrlWord(fResult, 512)
End Sub

'
' ZConnet
'
Function ZConnect(IOMasterIPAddr As String, PortNo As Integer, IRStrAddr As Integer, HRStrAddr As Integer) As Variant
	Dim IOMaster As Object									' CaoController Name (For Future Reference)
	Dim InputData(2) As Object								' Input Registers (For Future Reference)	
	Dim OutputData(7) As Object								' Holding Registers	(For Future Reference)
	Dim IOPort As Object									' IOLink Port Channel
		
	' CaoExtension Parameters
	Dim ZimID As String										' CaoExtension Name (For Future Reference)
	ZimID = Sprintf("Zim%d", PortNo)

	' Internal Variables
	Dim regAddr As String		
	Dim n As Integer = 0									' Loop Counter 

	IOMaster = Cao_AddController(IOMasterIPAddr)			' Initialize IO-Link Master (CaoController)
	IOPort = Cao_AddExtension(IOMaster, ZimID)				' Iniialize PortNo (CaoExtension)
	
	For n = 0 To Ubound(InputData) 
		regAddr = Sprintf("IRI%d", (IRStrAddr+n))
		InputData(n) = Cao_AddVariable(IOPort, regAddr)		' Initialize Input Registers
	Next n

	For n = 0 To Ubound(OutputData)
		regAddr = Sprintf("HRI%d",(HRStrAddr+n))
		OutputData(n) = Cao_AddVariable(IOPort, regAddr)	' Initialize Holding Registers
	Next n
	
	' Build Output Data
	ZConnect = CreateArray(4, VT_VARIANT)
	ZConnect(0) = IOMaster
	ZConnect(1) = IOPort
	ZConnect(2) = InputData							
	ZConnect(3) = OutputData						
End Function

' ---------------------------INPUT REGISTERS------------------------------------------------------

'
' Get Zimmer Gripper Status
'
Function ZGet_Status(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 2, 0)	' Extract First Element of Input Data Array
	ZGet_Status = Cao_GetVariable(RegisterNo)		' Read Status Word
End Function

'
' ZGet_HomePoseOK_Status
' 
Function ZGet_HomePoseOK_Status(ZGripper As Variant) As Integer
	ZGet_HomePoseOK_Status = zExtractBit(ZGet_Status(ZGripper), 0)
End Function

'
' ZGet_MotorOn_Status
'
Function ZGet_MotorOn_Status(ZGripper As Variant) As Integer
	ZGet_MotorOn_Status = zExtractBit(ZGet_Status(ZGripper), 1)
End Function

' 
' ZGet_InMotion_Status
'
Function ZGet_InMotion_Status(ZGripper As Variant) As Integer
	ZGet_InMotion_Status = zExtractBit(ZGet_Status(ZGripper), 2)
End Function

'
' ZGet_CompleteMovement_Status
'
Function ZGet_CompleteMovement_Status(ZGripper As Variant) As Integer
	ZGet_CompleteMovement_Status = zExtractBit(ZGet_Status(ZGripper), 3)
End Function

'
' ZGet_NJogModeActive_Status
'
Function ZGet_NJogModeActive_Status(ZGripper As Variant) As Integer
	ZGet_NJogModeActive_Status = zExtractBit(ZGet_Status(ZGripper), 4)
End Function

'
' ZGet_PJogModeActive_Status
'
Function ZGet_PJogModeActive_Status(ZGripper As Variant) As Integer
	ZGet_PJogModeActive_Status = zExtractBit(ZGet_Status(ZGripper), 5)
End Function

'
' ZGet_GripCtrlSysActive_Status
'
Function ZGet_GripCtrlSysActive_Status(ZGripper As Variant) As Integer
	ZGet_GripCtrlSysActive_Status = zExtractBit(ZGet_Status(ZGripper), 6)
End Function

'
' ZGet_CtrlError_Status
'
Function ZGet_CtrlError_Status(ZGripper As Variant) As Integer
	ZGet_CtrlError_Status = zExtractBit(ZGet_Status(ZGripper), 7)
End Function

'
' ZGet_BasePose_Status
'
Function ZGet_BasePose_Status(ZGripper As Variant) As Integer
	ZGet_BasePose_Status = zExtractBit(ZGet_Status(ZGripper), 8)
End Function

' 
' ZGet_TeachPose_Status
'
Function ZGet_TeachPose_Status(ZGripper As Variant) As Integer
	ZGet_TeachPose_Status = zExtractBit(ZGet_Status(ZGripper), 9)
End Function

' 
' ZGet_WorkPose_Status
'
Function ZGet_WorkPose_Status(ZGripper As Variant) As Integer
	ZGet_WorkPose_Status = zExtractBit(ZGet_Status(ZGripper), 10)
End Function

'
' ZGet_UndefPose_Status
'
Function ZGet_UndefPose_Status(ZGripper As Variant) As Integer
	ZGet_UndefPose_Status = zExtractBit(ZGet_Status(ZGripper), 11)
End Function

'
' ZGet_DataTransferOK_Status
'
Function ZGet_DataTransferOK_Status(ZGripper As Variant) As Integer
	ZGet_DataTransferOK_Status = zExtractBit(ZGet_Status(ZGripper), 12)
End Function

'
' ZGet_CtrlWordx100_Status
'
Function ZGet_CtrlWordx100_Status(ZGripper As Variant) As Integer
	ZGet_CtrlWordx100_Status = zExtractBit(ZGet_Status(ZGripper), 13)
End Function

'
' ZGet_CtrlWordx200_Status
'
Function ZGet_CtrlWordx200_Status(ZGripper As Variant) As Integer
	ZGet_CtrlWordx200_Status = zExtractBit(ZGet_Status(ZGripper), 14)
End Function 

'
' ZGet_Error_Status
'
Function ZGet_Error_Status(ZGripper As Variant) As Integer
	ZGet_Error_Status = zExtractBit(ZGet_Status(ZGripper), 15)
End Function

'
' Get Zimmer Gripper Diagnostic (Error)
'
Function ZGet_Diagnostics(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 2, 1)	' Extract Second Element of Input Data Array
	ZGet_Diagnostics = Cao_GetVariable(RegisterNo)	' Read Diagnostics Word
End Function

'
' Get Zimmer Gripper Current Position
'
Function ZGet_CurPos(ZGripper As Variant) As Single
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 2, 2)		' Extract Second Element of Input Data Array
	ZGet_CurPos = Cao_GetVariable(RegisterNo)*0.01		' Read Diagnostics Word (Scale to 0.01mm)
End Function

'-----------------------------HOLDING REGISTERS (READ)------------------------------------------------
'
' Get Zimmer Control Word Parameter
'
Function ZGet_CtrlWord(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 0)		' Extract 1st Element of Output Data Array
	ZGet_CtrlWord = Cao_GetVariable(RegisterNo)			' Read Control Word Parameter Value
End Function

'
' ZGet_DeviceMode
'
Function ZGet_DeviceMode(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 1)		' Extract 2nd Element of Output Data Array
	ZGet_DeviceMode = Cao_GetVariable(RegisterNo)		' Read Control Word Parameter Value
End Function

'
' ZGet_WorkpieceNo
'
Function ZGet_WorkpieceNo(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 1)		' Extract 3rd Element of Output Data Array
	ZGet_WorkpieceNo = Cao_GetVariable(RegisterNo)		' Read Control Word Parameter Value
End Function

'
' ZGet_PoseTolerance
'
Function ZGet_PoseTolerance(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 2)		' Extract 5th Element of Output Data Array
	ZGet_PoseTolerance = Cao_GetVariable(RegisterNo)	' Read Control Word Parameter Value
End Function

'
' ZGet_GripForce
'
Function ZGet_GripForce(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 3)	' Extract 6th Element of Output Data Array
	ZGet_GripForce = Cao_GetVariable(RegisterNo)	' Read Control Word Parameter Value
End Function

'
' ZGet_DriveVelocity
'
Function ZGet_DriveVelocity(ZGripper As Variant) As Integer
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 3)		' Extract 7th Element of Output Data Array
	ZGet_DriveVelocity = Cao_GetVariable(RegisterNo)	' Read Control Word Parameter Value
End Function

'
' ZGet_BasePose
'
Function ZGet_BasePose(ZGripper As Variant) As Single
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 4)		' Extract 8th Element of Output Data Array
	ZGet_BasePose = Cao_GetVariable(RegisterNo)*0.01	' Read Control Word Parameter Value (Scale to nearest 0.01mm)
End Function

'
' ZGet_ShiftPose
'
Function ZGet_ShiftPose(ZGripper As Variant) As Single
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 5)		' Extract 9th Element of Output Data Array
	ZGet_ShiftPose = Cao_GetVariable(RegisterNo)*0.01	' Read Control Word Parameter Value (Scale to nearest 0.01mm)
End Function

'
' ZGet_TeachPose
'
Function ZGet_TeachPose(ZGripper As Variant) As Single
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 6)		' Extract 10th Element of Output Data Array
	ZGet_TeachPose = Cao_GetVariable(RegisterNo)*0.01	' Read Control Word Parameter Value (Scale to nearest 0.01mm)
End Function

'
' ZGet_WorkPose
'
Function ZGet_WorkPose(ZGripper As Variant) As Single
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 7)		' Extract 11th Element of Output Data Array
	ZGet_WorkPose = Cao_GetVariable(RegisterNo)*0.01	' Read Control Word Parameter Value (Scale to nearest 0.01mm)
End Function

'-----------------------------HOLDING REGISTERS (WRITE)------------------------------------------------
'
' ZSet_CtrlWord
'
Function ZSet_CtrlWord(ZGripper As Variant, newValue As Variant) As Integer 
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 0)			' Extract 1st Element of Output Data Array	
	ZSet_CtrlWord = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_DeviceMode
'
Function ZSet_DeviceMode(ZGripper As Variant, newValue As Variant) As Integer
	Dim RegisterNo As Object
	Dim currValue As Variant
	RegisterNo = zExtractObjElement(ZGripper, 3, 1)			' Extract 2nd Element of Output Data Array	
	
	currValue =  Cao_GetVariable(RegisterNo)				' Read Current Value (16 bit)
	currValue = currValue AND &h00FF						' Clear MSBs (Top Byte)
	newValue = newValue << 8								' Shift new value to MSB (Top Byte)
	newValue = newValue OR currValue						' Merge new MSB with curr LSB

	ZSet_DeviceMode = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_WorkpieceNo
'
Function ZSet_WorkpieceNo(ZGripper As Variant, newValue As Variant) As Integer
	Dim RegisterNo As Object
	Dim currValue As Variant
	RegisterNo = zExtractObjElement(ZGripper, 3, 1)				' Extract 2nd Element of Output Data Array	
	
	currValue =  Cao_GetVariable(RegisterNo)					' Read Current Value (16 bit)
	currValue = currValue AND &hFF00							' Clear LSBs (Bottom Byte)
	newValue = newValue OR currValue							' Merge new LSB with curr MSB

	ZSet_WorkpieceNo = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_PoseTolerance
'
Function ZSet_PoseTolerance(ZGripper As Variant, newValue As Variant) As Integer
	Dim RegisterNo As Object
	Dim currValue As Variant
	RegisterNo = zExtractObjElement(ZGripper, 3, 2)				' Extract 3rd Element of Output Data Array	
	
	currValue =  Cao_GetVariable(RegisterNo)					' Read Current Value (16 bit)
	currValue = currValue AND &hFF00							' Clear LSBs (Bottom Byte)
	newValue = newValue OR currValue							' Merge new LSB with curr MSB

	ZSet_PoseTolerance = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_DeviceMode
'
Function ZSet_GripForce(ZGripper As Variant, newValue As Variant) As Integer
	Dim RegisterNo As Object
	Dim currValue As Variant
	RegisterNo = zExtractObjElement(ZGripper, 3, 3)			' Extract 4th Element of Output Data Array	
	
	currValue =  Cao_GetVariable(RegisterNo)				' Read Current Value (16 bit)
	currValue = currValue AND &h00FF						' Clear MSBs (Top Byte)
	newValue = newValue << 8								' Shift new value to MSB (Top Byte)
	newValue = newValue OR currValue						' Merge new MSB with curr LSB

	ZSet_GripForce = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_DriveVelocity
'
Function ZSet_DriveVelocity(ZGripper As Variant, newValue As Variant) As Integer
	Dim RegisterNo As Object
	Dim currValue As Variant
	RegisterNo = zExtractObjElement(ZGripper, 3, 3)				' Extract 4th Element of Output Data Array	
	
	currValue =  Cao_GetVariable(RegisterNo)					' Read Current Value (16 bit)
	currValue = currValue AND &hFF00							' Clear LSBs (Bottom Byte)
	newValue = newValue OR currValue							' Merge new LSB with curr MSB

	ZSet_DriveVelocity = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_BasePose
'
Function ZSet_BasePose(ZGripper As Variant, newValue As Variant) As Integer 
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 4)			' Extract 5th Element of Output Data Array	
	ZSet_BasePose = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_ShiftPose
'
Function ZSet_ShiftPose(ZGripper As Variant, newValue As Variant) As Integer 
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 5)			' Extract 6th Element of Output Data Array	
	ZSet_ShiftPose = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_TeachPose
'
Function ZSet_TeachPose(ZGripper As Variant, newValue As Variant) As Integer 
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 6)			' Extract 7th Element of Output Data Array	
	ZSet_TeachPose = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

'
' ZSet_WorkPose
'
Function ZSet_WorkPose(ZGripper As Variant, newValue As Variant) As Integer 
	Dim RegisterNo As Object
	RegisterNo = zExtractObjElement(ZGripper, 3, 7)			' Extract 8th Element of Output Data Array	
	ZSet_WorkPose = Cao_SetVariable(RegisterNo, newValue)	' Write to Control Word Parameter Variable
End Function

' --------------PRIVATE FUNCTIONS------------------------------------------------------------------
Function zExtractObjElement(ObjArray As Variant, RowIndex As Integer, ColumnIndex As Integer) As Object
	Dim InputDataArray As Variant
	Dim RegisterNo As Object
			
	InputDataArray = ObjArray(RowIndex)				' Extract InputData Array
	RegisterNo = InputDataArray(ColumnIndex)		' Extract First Element of Input Data Array

	zExtractObjElement = RegisterNo
End Function

Function zExtractBit(Number As Integer, Digit As Integer) As Integer
	zExtractBit = Number AND Pow(2, Digit)
	
	If (zExtractBit) Then
		zExtractBit = 1
	Else
		zExtractBit = 0
	End If
End Function

' --------------CAO FUNCTIONS----------------------------------------------------------------------
'
' CaoWorkspace::AddController()
'
Function Cao_AddController(IOMasterIPAddr As String) As Object
	Dim caoCtrlName As String
	Dim caoProv As String
	
	' CaoController Parameters
	caoCtrlName = IOMasterIPAddr
	caoProv = "CaoProv.Modbus.X"
	IOMasterIPAddr = Sprintf("Conn=eth:%s, @IfNotMember", IOMasterIPAddr)

	Cao_AddController = Cao.AddController(caoCtrlName, caoProv, "", IOMasterIPAddr)
End Function

'
' CaoController::AddExtension()
'
Function Cao_AddExtension(CaoCtrl As Object, ZimExt As String) As Object
	' CaoExtension Parameters
	Dim ExtOpt As String					' CaoExtension Option
	ExtOpt = Sprintf("UnitAddress=%d, @IfNotMember", Right(ZimExt,1))

	Cao_AddExtension = CaoCtrl.AddExtension(ZimExt, ExtOpt)							
End Function

'
' CaoExtension::AddVariable
'
Function Cao_AddVariable(CaoExt As Object, CaoVarName As String) As Object
	 Cao_AddVariable = CaoExt.AddVariable(CaoVarName, "@IfNotMember")
End Function

'
' CaoVariable.Value (Get)
'
Function Cao_GetVariable(CaoVar As Object) As Integer
	Cao_GetVariable = CaoVar.Value
End Function

'
' CaoVariable.Value (Set)
'
Function Cao_SetVariable(CaoVar As Object, newValue As Variant) As Integer
	CaoVar.Value = newValue
End Function






