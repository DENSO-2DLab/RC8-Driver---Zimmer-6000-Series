'!TITLE "Zimmer Application Functions"
' ***************************************************************************************
' * RC8 Driver For Zimmer Gripper														*
' *																						*
' * Author: Carlos A. Lopez																*
' *																						*
' * If you have any issues with this driver 											*
' * please contact us at: 																*
' * 																					*
' *	< robotics_applications@densodrive.com >											*
' *																						*
' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, *	
' * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 		*
' * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 	*
' * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 	*
' * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 		*
' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.								*
' *																						*
' ***************************************************************************************

#Include "Zimmer.h"

'----------------------------------------------------------------------------------------
' ZConnet
'----------------------------------------------------------------------------------------
Function ZConnect(IOMasterIPAddr As String,_
				  PortNo As Integer,_
				  IRStrAddr As Integer,_
				  HRStrAddr As Integer)_
				  As Variant

	' Validate New Data (If not Throw Error)
	If zIPValid(IOMasterIPAddr) = 0 Then Err.Raise &h8150001B	'Incorrect Argument
	
	Dim IOMaster As Object				' IOLInk Master Object Reference 
	Dim IOPort As Object				' IOLink Port Channel Reference 
	Dim ZimID As String					' CaoExtension Name (For Future Reference)
	ZimID = Sprintf("Zim%d", PortNo)

	' Initialize IO-Link Master (CaoController)
	IOMaster = Cao_AddController(IOMasterIPAddr)	
	
	' Iniialize PortNo (CaoExtension)
	IOPort = Cao_AddExtension(IOMaster, ZimID)		
		
	' Internal Variables
	Dim regAddr As String		
	Dim n As Integer = 0			' Loop Counter 

	' Input Registers (For Future Reference)	
	Dim InputData(2) As Object		
	For n = 0 To Ubound(InputData) 
		regAddr = Sprintf("IRI%d", (IRStrAddr + n))

		' Initialize Input Registers
		InputData(n) = Cao_AddVariable(IOPort, regAddr)		
	Next n

	' Holding Registers	(For Future Reference)
	Dim OutputData(7) As Object		
	For n = 0 To Ubound(OutputData)
		regAddr = Sprintf("HRI%d",(HRStrAddr + n))
		
		' Initialize Holding Registers
		OutputData(n) = Cao_AddVariable(IOPort, regAddr)	
	Next n
	
	' Build Output Data
	ZConnect = CreateArray(4, VT_VARIANT)
	ZConnect(0) = IOMaster
	ZConnect(1) = IOPort
	ZConnect(2) = InputData							
	ZConnect(3) = OutputData
End Function

'----------------------------------------------------------------------------------------
' ZIdle
'----------------------------------------------------------------------------------------
Function ZIdle(ZGripper As Variant) As Integer
	Call ZSet_CtrlWord(ZGripper, 1)		' Start Transfer Data
	Call ZSet_DeviceMode(ZGripper, 1)	' Set DeviceMode to Idle
	Call ZSet_CtrlWord(ZGripper, 0)		' Stop Transfer Data
	
	ZIdle = ZGet_Error_Status(ZGripper)	' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZGripperReset
'----------------------------------------------------------------------------------------
Function ZGripperReset(ZGripper As Variant) As Integer
	Call ZSet_CtrlWord(ZGripper, 1)					' Start Transfer Data

	Dim currDeviceMode As Variant
	currDeviceMode = ZGet_DeviceMode(ZGripper)
	Call ZSet_DeviceMode(ZGripper, 2)				' Set DeviceMode to Gripper Reset
	Call ZSet_DeviceMode(ZGripper, currDeviceMode)	' Set DeviceMode to Previous Mode
	
	Call ZSet_CtrlWord(ZGripper, 0)					' Stop Transfer Data

	ZGripperReset = ZGet_Error_Status(ZGripper)		' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZResetDirFlag
'----------------------------------------------------------------------------------------
Function ZResetDirFlag(ZGripper As Variant) As Integer
	' Direction Flag Reset
	Call ZSet_CtrlWord(ZGripper, 4)					
	
	' Return Error Status
	ZResetDirFlag = ZGet_Error_Status(ZGripper)
End Function

'----------------------------------------------------------------------------------------
' ZMotor
'----------------------------------------------------------------------------------------
Function ZMotor(ZGripper As Variant, zMotorState As Integer) As Integer
	Call ZSet_CtrlWord(ZGripper, 1)					' Start Transfer Data

	Dim currDeviceMode As Variant
	currDeviceMode = ZGet_DeviceMode(ZGripper)
	
	If zMotorState = 1 Then 
		' Set DeviceMode to Swith off Motor / Stop Gripper Movement
		Call ZSet_DeviceMode(ZGripper, 3)
		Wait ZGet_MotorOn_Status(ZGripper) = 1
	Else
		Call ZSet_DeviceMode(ZGripper, 5)	
		Wait ZGet_MotorOn_Status(ZGripper) = 0
	End If 

	Call ZSet_DeviceMode(ZGripper, currDeviceMode)	' Set DeviceMode to Previous Mode
	Call ZSet_CtrlWord(ZGripper, 0)					' Stop Transfer Data

	ZMotor = ZGet_Error_Status(ZGripper)			' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZHome
'----------------------------------------------------------------------------------------
Function ZHome(ZGripper As Variant) As Integer
	Call ZSet_CtrlWord(ZGripper, 1)		' Start Transfer Data
	Call ZSet_DeviceMode(ZGripper, 10)	' Set DeviceMode to Homing
	Call ZSet_CtrlWord(ZGripper, 0)		' Stop Transfer Data
	
	ZHome = ZGet_Error_Status(ZGripper)	' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZJog
'----------------------------------------------------------------------------------------
Function ZJog(ZGripper As Variant, jogDirection As Integer) As Integer
	Call ZSet_CtrlWord(ZGripper, 1)		' Transfer Data to Motor Control System
	Call ZSet_DeviceMode(ZGripper, 11)	' Set DeviceMode to Activate Jog Mode
	
	' Jog Gripper Negative Direction (To Base Position)
	If jogDirection = 0 Then 
		Call ZSet_CtrlWord(ZGripper, 1024)	' Set -jog mode
		
		' Get -Jog Active Status
		ZJog = ZGet_NJogModeActive_Status(ZGripper)

	' Jog Gripper Positive Direction (To Work Position)
	ElseIf jogDirection = 1 Then 
		Call ZSet_CtrlWord(ZGripper, 2048)	' Set +jog mode

		' Get +Jog Active Status
		ZJog = ZGet_Error_Status(ZGripper)	' Return Error Status
	End If
End Function

'----------------------------------------------------------------------------------------
' ZOpen 
'----------------------------------------------------------------------------------------
Function ZOpen(ZGripper As Variant) As Integer
	Call ZSet_CtrlWord(ZGripper, 256)		' Transfer Data to Motor Control System

	Wait ZGet_InMotion_Status(ZGripper) = 1
	Wait ZGet_CompleteMovement_Status(ZGripper) = 1

	ZOpen = ZGet_Error_Status(ZGripper)		' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZClose
'----------------------------------------------------------------------------------------
Function ZClose(ZGripper As Variant) As Integer
	Call ZSet_CtrlWord(ZGripper, 512)		' Transfer Data to Motor Control System
	
	Wait ZGet_InMotion_Status(ZGripper) = 1
	Wait ZGet_CompleteMovement_Status(ZGripper) = 1

	ZClose = ZGet_Error_Status(ZGripper)	' Return Error Status
End Function

'----------------------------------------------------------------------------------------
' ZSet_MotionProfile
'----------------------------------------------------------------------------------------
Function ZSetMotionParam(ZGripper As Variant,_
						   motionProfile As Variant,_
						   posTolerance As Variant,_
						   gripForce As Variant,_
						   driveV As Variant,_
				       	   posBase As Variant,_
				       	   posShift As Variant,_
						   posTeach As Variant,_
						   posWork As Variant)_
				       	   As Integer

	' Start Transfer Data
	Call ZSet_CtrlWord(ZGripper, 1)					
	Call ZSet_WorkpieceNo(ZGripper, 0)	
	Call ZSet_DeviceMode(ZGripper, motionProfile)	 	
	Call ZSet_PoseTolerance(ZGripper, posTolerance)
	Call ZSet_GripForce(ZGripper, gripForce)
	Call ZSet_DriveVelocity(ZGripper, driveV)
	Call ZSet_BasePose(ZGripper, posBase)
	Call ZSet_ShiftPose(ZGripper, posShift)
	Call ZSet_TeachPose(ZGripper, posTeach)
	Call ZSet_WorkPose(ZGripper, posWork)

	' Stop Transfer Data
	Call ZSet_CtrlWord(ZGripper, 0)	
	
	' Return Error Status	
	ZSetMotionParam = ZGet_Error_Status(ZGripper)					
End Function

'----------------------------------------------------------------------------------------
' ZTeachPos
'----------------------------------------------------------------------------------------
Function ZTeachPos(ZGripper As Variant) As Integer
	' Teach
	Call ZSet_CtrlWord(ZGripper, 8)	

	' Return Error Status	
	ZTeachPos = ZGet_Error_Status(ZGripper)	
End Function

'----------------------------------------------------------------------------------------
' ZSave_WorkRecipe
'----------------------------------------------------------------------------------------
Function ZSaveWorkRecipe(ZGripper As Variant, workRecipe As Variant) As Integer
	' Start Transfer Data
	Call ZSet_CtrlWord(ZGripper, 1)
	Call ZSet_WorkpieceNo(ZGripper, workRecipe)	

	' Write PDU data to the Workpiece Recipe
	Call ZSet_CtrlWord(ZGripper, 2)
	Wait ZGet_DataTransferOK_Status(ZGripper) = 0 

	' Start Transfer Data
	Call ZSet_CtrlWord(ZGripper, 1)
	Wait ZGet_DataTransferOK_Status(ZGripper) = 1 

	' Stop Transfer Data
	Call ZSet_CtrlWord(ZGripper, 0)

	' Return Error Status	
	ZSaveWorkRecipe = ZGet_Error_Status(ZGripper)
End Function

'----------------------------------------------------------------------------------------
' ZLoad_WorkRecipe
'----------------------------------------------------------------------------------------
Function ZLoadWorkRecipe(ZGripper As Variant, workRecipe As Variant) As Integer
	' Start Transfer Data
	Call ZSet_CtrlWord(ZGripper, 1)
	Call ZSet_WorkpieceNo(ZGripper, workRecipe)	

	' Stop Transfer Data
	Call ZSet_CtrlWord(ZGripper, 0)

	' Return Error Status	
	ZLoadWorkRecipe = ZGet_Error_Status(ZGripper)	
End Function
